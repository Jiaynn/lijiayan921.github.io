<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>React Hooks</title>
      <link href="/2022/10/19/hooks%E8%AF%A6%E8%A7%A3/"/>
      <url>/2022/10/19/hooks%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="memo-、useCallback-、useMemo-使用场景"><a href="#memo-、useCallback-、useMemo-使用场景" class="headerlink" title="memo()、useCallback()、useMemo()使用场景"></a>memo()、useCallback()、useMemo()使用场景</h3><p>当父组件的props或state变化时，render重新渲染，但传递给子组件的props没有发生变化说着只是简单调用了一下子组件，这时子组件也要重新渲染，这就导致了组件的不必要的渲染</p><h4 id="React-memo"><a href="#React-memo" class="headerlink" title="React.memo()"></a>React.memo()</h4><p><strong>当父组件只是简单调用子组件，并未给子组件传递任何属性，我们可以通过memo来控制函数组件的渲染</strong></p><p><code>React.memo()</code>将组件作为函数(memo)的参数，函数的返回值(Child)是一个新的组件。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Child</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./child&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">Parent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">increment</span> = (<span class="params"></span>) =&gt; <span class="title function_">setCount</span>(count + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;increment&#125;</span>&gt;</span>点击次数：&#123;count&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Child</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;memo&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">Child</span>=<span class="title function_">memo</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    consloe.<span class="title function_">log</span>(<span class="string">&#x27;渲染了&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//使用memo()包裹后的组件，在Parent组件重新渲染更新时，Child组件并没有重新渲染更新</span></span><br></pre></td></tr></table></figure><p><strong>当我们传值给子组件时，这时使用memo函数就对控制组件的更新不起作用了</strong></p><p>父组件</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Child</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./child&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">Parent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [name, setName] = <span class="title function_">useState</span>(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">increment</span> = (<span class="params"></span>) =&gt; <span class="title function_">setCount</span>(count + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">onClick</span> = (<span class="params">name: string</span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setName</span>(name);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;increment&#125;</span>&gt;</span>点击次数：&#123;count&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Child</span> <span class="attr">name</span>=<span class="string">&#123;name&#125;</span> <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; memo &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">Child</span> = <span class="title function_">memo</span>(</span><br><span class="line">  <span class="function">(<span class="params">props: &#123; name: string; onClick: (value: any) =&gt; <span class="keyword">void</span> &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; name, onClick &#125; = props;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;渲染了&quot;</span>, name, onClick);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> onClick(&quot;小红&quot;)&#125;&gt;改变 name 值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>出现这样结果的原因：</p><p>点击父组件按钮时，改变了父组件的count，导致父组件重新渲染</p><p>父组件重新渲染时，重新创建了onClick函数，导致传递给子组件的onClick属性发生了变化，导致子组件重新渲染</p><p>如果传递给子组件的只有基本数据类型将不会重新渲染</p><p>注意: 如果直接使用<code>useState</code>解构的setName传给子组件, 子组件将不会重复渲染，因为解构出来的是一个memoized 函数。</p><h4 id="React-useCallback"><a href="#React-useCallback" class="headerlink" title="React.useCallback()"></a>React.useCallback()</h4><p><strong>所以，在这种情况下我们使用React.useCallback()    useCallback(fn, deps)</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useCallback, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Child</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./child&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">Parent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [name, setName] = <span class="title function_">useState</span>(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">increment</span> = (<span class="params"></span>) =&gt; <span class="title function_">setCount</span>(count + <span class="number">1</span>);</span><br><span class="line"><span class="comment">//使用useCallback钩子包裹的回调函数是memoized函数，他初次调用该函数时，缓存参数和计算结果，再次调用这个函数时，如果第二个参数依赖项没有发生改变，则直接返回缓存结果，不会重新渲染</span></span><br><span class="line">  <span class="keyword">const</span> onClick = <span class="title function_">useCallback</span>(<span class="function">(<span class="params">name: string</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setName</span>(name);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;increment&#125;</span>&gt;</span>点击次数：&#123;count&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Child</span> <span class="attr">name</span>=<span class="string">&#123;name&#125;</span> <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>但当我们传递的属性name不字符串，而是对象时</strong></p><p>父组件</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useCallback, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Child</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./child&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">Parent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="comment">// const [userInfo, setUserInfo] = useState(&#123; name: &quot;小明&quot;, age: 18 &#125;);</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">increment</span> = (<span class="params"></span>) =&gt; <span class="title function_">setCount</span>(count + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">const</span> userInfo = &#123; <span class="attr">name</span>: <span class="string">&quot;小明&quot;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;increment&#125;</span>&gt;</span>点击次数：&#123;count&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Child</span> <span class="attr">userInfo</span>=<span class="string">&#123;userInfo&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; memo &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">Child</span> = <span class="title function_">memo</span>(</span><br><span class="line">  <span class="function">(<span class="params">props: &#123; userInfo: &#123; name: string; age: number &#125; &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; userInfo &#125; = props;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;渲染了&quot;</span>, userInfo);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>名字： &#123;userInfo.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>年龄：&#123;userInfo.age&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>点击父组件count，看到子组件每次都重新渲染了。 分析原因跟调用函数是一样的：</p><ul><li>点击父组件按钮，触发父组件重新渲染；</li><li>父组件渲染，<code>const userInfo = &#123; name: &quot;小明&quot;, age: 18 &#125;;</code> 一行会重新生成一个新对象，导致传递给子组件的 userInfo 属性值变化，进而导致子组件重新渲染。</li><li>注意: 如果使用<code>useState</code>解构的userInfo, 子组件将不会重复渲染，因为解构出来的是一个memoized 值。</li></ul><p><strong>这时我们使用React.useMemo()    useMemo(() &#x3D;&gt; fn, dep)</strong></p><h4 id="React-useMemo"><a href="#React-useMemo" class="headerlink" title="React.useMemo()"></a>React.useMemo()</h4><p>useMemo()返回的是一个 memoized 值。</p><p>如果没有提供依赖项数组，<code>useMemo</code> 在每次渲染时都会计算新的值。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useMemo, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Child</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./child&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">Parent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="comment">// const [userInfo, setUserInfo] = useState(&#123; name: &quot;小明&quot;, age: 18 &#125;);</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">increment</span> = (<span class="params"></span>) =&gt; <span class="title function_">setCount</span>(count + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">const</span> userInfo = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> (&#123; <span class="attr">name</span>: <span class="string">&quot;小明&quot;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;), []);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;increment&#125;</span>&gt;</span>点击次数：&#123;count&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Child</span> <span class="attr">userInfo</span>=<span class="string">&#123;userInfo&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对比useCallback()  和useMemo()</p><p>useCallback(fn, deps)    返回该回调函数的<code>memoized回调函数</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> onClick = <span class="title function_">useCallback</span>(<span class="function">(<span class="params">name: string</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="title function_">setName</span>(name);</span><br><span class="line"> &#125;, []);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> useMemo(() &#x3D;&gt; fn, dep)     返回的是一个 memoized 值。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> userInfo = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> (&#123; <span class="attr">name</span>: <span class="string">&quot;小明&quot;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;), []);</span><br></pre></td></tr></table></figure><h3 id="useRef-、createRef-区别"><a href="#useRef-、createRef-区别" class="headerlink" title="useRef()、createRef()区别"></a>useRef()、createRef()区别</h3><p>首先看一个示例，得到useRef()和useState()的区别</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> [like, setLike] = <span class="title class_">React</span>.<span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">handleAlertClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">`you clicked on <span class="subst">$&#123;like&#125;</span>`</span>)</span><br><span class="line">            <span class="comment">//形成闭包，所以弹出来的是当时触发函数时的like值</span></span><br><span class="line">        &#125;, <span class="number">3000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setLike(like + 1)&#125;&gt;&#123;like&#125;赞<span class="tag">&lt;/<span class="name">button</span>&gt;</span>\</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleAlertClick&#125;</span>&gt;</span>Alert<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当我们点击到like为6的时候, 点击 alert , 再继续增加like到10, 弹出的值为 6, 而非 10.</span></span><br></pre></td></tr></table></figure><p>出现以上的原因，当我们更改状态的时候，React会重新渲染组件，每次的渲染都会拿到独立的like值，并重新定义个handleAlertClick函数，每个handleAlertClick函数体里的like值也是它自己的，所以当like为6时，点击alert，触发了handleAlertClick，此时的like是6，哪怕后面继续更改like到10，但alert时的like已经定下来了。<br>使用useRef()</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>,&#123;useRef,useEffect&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="title class_">Lastlike</span> = <span class="title function_">useRef</span>(<span class="number">0</span>);</span><br><span class="line">   <span class="keyword">let</span> [like, setLike] = <span class="title class_">React</span>.<span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">handleAlertClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">`you clicked on <span class="subst">$&#123;Lastlike.current&#125;</span>`</span>)</span><br><span class="line">            <span class="comment">//形成闭包，所以弹出来的是当时触发函数时的like值</span></span><br><span class="line">        &#125;, <span class="number">3000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title class_">Lastlike</span>.<span class="property">current</span>=like</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span>  <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setLike(like + 1)&#125;&gt;&#123;like&#125;赞<span class="tag">&lt;/<span class="name">button</span>&gt;</span>\</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleAlertClick&#125;</span>&gt;</span>Alert<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>useRef()、createRef()区别</p><p>useRef()定义变量，当页面重新渲染的时候这个值不会改变</p><p>createRef()定义变量，每次都会返回新的引用，当页面重新渲染的时候会重新赋值</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>,&#123;useRef,createRef,useState&#125;<span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Lin</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> [curIndex,setIndex]=<span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">let</span> refFromUseRef=<span class="title function_">useRef</span>()</span><br><span class="line">    <span class="keyword">let</span> refFromCreateRef=<span class="title function_">createRef</span>()</span><br><span class="line">    <span class="keyword">if</span>(!refFromUseRef.<span class="property">current</span>)&#123;</span><br><span class="line">        refFromUseRef.<span class="property">current</span>=curIndex</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!refFromCreateRef.<span class="property">current</span>)&#123;</span><br><span class="line">        refFromCreateRef.<span class="property">current</span>=curIndex</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>当前的值：&#123;curIndex&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>使用useRef得到的值:&#123;refFromUseRef.current&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>使用createRef得到的值:&#123;refFromCreateRef.current&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;setIndex(curIndex+1)&#125;&#125;&gt;加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用useRef()得到的值初始化后一直不变，而createRef()得到的值随着每次更新而重新赋值</span></span><br></pre></td></tr></table></figure><h4 id="使用forwardRef"><a href="#使用forwardRef" class="headerlink" title="使用forwardRef()"></a>使用forwardRef()</h4><p>使用场景：父组件中调用子组件中某个DOM节点或者组件的ref</p><p>React.forwardRef((props, ref) &#x3D;&gt; {})<br>创建了一个子组件，这个组件将会接受到父级传递的ref属性，可以将父组件创建的ref挂到子组件的某个dom元素上，然后在父组件就可以通过这个ref获取到该dom元素</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//子组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>,&#123;forwardRef&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">forwardRef</span>(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//父组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Son</span> <span class="keyword">from</span> <span class="string">&#x27;./Son&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Lin</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> myRef=<span class="title class_">React</span>.<span class="title function_">useRef</span>()</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"></span>)&#123;</span><br><span class="line">        myRef.<span class="property">current</span>.<span class="title function_">focus</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Son</span> <span class="attr">ref</span>=<span class="string">&#123;myRef&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Son</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>点击聚焦<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="forwardRef搭配useImperativeHandle"><a href="#forwardRef搭配useImperativeHandle" class="headerlink" title="forwardRef搭配useImperativeHandle"></a>forwardRef搭配useImperativeHandle</h4><p><strong>useImperativeHandle:<strong>在函数式组件中，用于定义暴露给父组件的ref方法，用来</strong>限制子组件对外暴露的信息</strong>，只有useImperativeHandle第二个参数定义的属性跟方法才可以在父组件获取到</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//子组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>,&#123;forwardRef&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useRef,useImperativeHandle &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">forwardRef</span>(<span class="function">(<span class="params">props, ref</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> inputRef = <span class="title function_">useRef</span>();</span><br><span class="line">    <span class="keyword">const</span> iptRef=<span class="title function_">useRef</span>()</span><br><span class="line">    <span class="comment">// 命令式的给`ref.current`赋值个对象</span></span><br><span class="line">    <span class="comment">//第一个参数ref：表示暴露的哪一个ref,其中inputRef暴露给父组件</span></span><br><span class="line">    <span class="comment">//第二个参数返回值是一个对象，即这个 ref 的 current 对象</span></span><br><span class="line">    <span class="title function_">useImperativeHandle</span>(ref, <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">      <span class="attr">focus</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        inputRef.<span class="property">current</span>.<span class="title function_">focus</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;inputRef&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;iptRef&#125;</span> <span class="attr">input</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>上面这个例子中与直接转发 ref 不同，直接转发 ref 是将 React.forwardRef 中函数上的 ref 参数直接应用在了返回元素的 ref 属性上，其实父、子组件引用的是同一个 ref 的 current 对象，官方不建议使用这样的 ref 透传，而使用 useImperativeHandle 后，可以让父、子组件分别有自己的 ref，通过 React.forwardRef 将父组件的 ref 透传过来，通过 useImperativeHandle 方法来自定义开放给父组件的 current。</p><p>再来一个示例：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//父组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Son</span> <span class="keyword">from</span> <span class="string">&#x27;./Son&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Lin</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> myRef=<span class="title class_">React</span>.<span class="title function_">useRef</span>()</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Son</span> <span class="attr">ref</span>=<span class="string">&#123;myRef&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Son</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> console.log(myRef.current)&#125;</span></span><br><span class="line"><span class="language-xml">        &gt;父组件访问子组件的实例属性<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//子组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;</span><br><span class="line">  useState,useRef,useImperativeHandle,useCallback</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">React</span>.<span class="title function_">forwardRef</span>(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [ fresh, setFresh ] = <span class="title function_">useState</span>(<span class="literal">false</span>)</span><br><span class="line">  <span class="keyword">const</span> attRef = <span class="title function_">useRef</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="title function_">useImperativeHandle</span>(ref, <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    attRef,</span><br><span class="line">    fresh</span><br><span class="line">  &#125;), [ fresh ]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleClick = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    attRef.<span class="property">current</span>++;</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;attRef.current&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>Fancy<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setFresh(!fresh)&#125;&gt;刷新<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>分析：</p><p> 首先点击Fancy,attRef.current值加1，但它使用的是useRef(),他定义的变量更改之后不会引起页面重新渲染，但它实际上是记住了这个值的</p><p> 通过 useImperativeHandle 将子组件的实例属性输出到父组件，作为组件实例的变量，获取到的数据都是是最新的。</p><p> 所以父组件中点击获取子组件的ref时,那里面的attRef实际上时改变了的</p><p> 当我们点击了刷新按钮时，通过setFresh引起页面的重新渲染，这时attRef.current读取到的是最新值</p><h3 id="详解useState"><a href="#详解useState" class="headerlink" title="详解useState()"></a>详解useState()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//语法</span></span><br><span class="line"><span class="keyword">const</span> [state, setState] = <span class="title function_">useState</span>(initialState);</span><br></pre></td></tr></table></figure><p>返回一个 state，以及更新 state 的函数组成的数组。</p><p>在初始渲染期间，返回的状态 (<code>state</code>) 与传入的第一个参数 (<code>initialState</code>) 值相同。</p><p><code>setState</code> 函数用于更新 state。它接收一个新的 state 值并将组件的一次重新渲染加入<a href="https://so.csdn.net/so/search?q=%E9%98%9F%E5%88%97&spm=1001.2101.3001.7020">队列</a>。</p><h4 id="setState-的两种更新方式"><a href="#setState-的两种更新方式" class="headerlink" title="setState()的两种更新方式"></a>setState()的两种更新方式</h4><p>对象式和函数式两种方式：这两种方式在同步更新中没有区别</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">//事件中触发也是异步的，如果在</span></span><br><span class="line">    <span class="title function_">setCount</span>(count + <span class="number">1</span>)</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleClickFn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">setCount</span>(<span class="function">(<span class="params">prevCount</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> prevCount + <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="title function_">setCount</span>(<span class="function">(<span class="params">prevCount</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> prevCount + <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      Count: &#123;count&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClickFn&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但当他为异步更新时</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//当我多次点击按钮时，指会更新一次，因为当我点击按钮的时候，他是异步执行的，所以当我每次点击时，触发函数，定时器在异步队列中排队，这时定时器获取到的count值都是一样的，所以最后只更新了一次</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">setCount</span>(count + <span class="number">1</span>)</span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="comment">//函数式更新可以获取到上次更新的值，所以多次点击时，定时器排队等到上一个定时器执行完后下一个定时器获取值，即每次得到值都是最新的</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleClickFn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">setCount</span>(<span class="function">(<span class="params">prevCount</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> prevCount + <span class="number">1</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      Count: &#123;count&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClickFn&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>理解setState()</strong></p><p>在类组件中使用setState()更新状态，在事件绑定中操作 state 的时候，setState更新就是异步的。当你在定时器中操作 state 的时候，而 setState 更新就是同步的。</p><p>因为react 认为当你在事件绑定中操作 state 是非常频繁的，所以为了节约性能 react 会把多次 setState 进行合并为一次，最后在一次性的更新 state，而定时器里面操作 state 是不会把多次合并为一次更新的。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Counter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span> &#125;)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span> &#125;)</span><br><span class="line">    <span class="comment">// 这样写只会加1</span></span><br><span class="line">  &#125;</span><br><span class="line">  handleClickFn = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">(<span class="params">prevState</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: prevState.<span class="property">count</span> + <span class="number">1</span> &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">(<span class="params">prevState</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: prevState.<span class="property">count</span> + <span class="number">1</span> &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">        Count: &#123;this.state.count&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClickFn&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在定时器中使用setState()更新状态</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Counter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">      <span class="variable language_">super</span>(props)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">state</span> = &#123; <span class="attr">count</span>: <span class="number">0</span> ,<span class="attr">count2</span>:<span class="number">1</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//这里面执行的setState是异步的，react会将代码执行完，最后合并setState,</span></span><br><span class="line">        <span class="comment">//执行最后一次的setState(),因为react发现两次所更新的状态都是同一个，进行合并后，后面的覆盖了前面的更新</span></span><br><span class="line">        <span class="comment">//这个更新得到的值是+2</span></span><br><span class="line">        <span class="comment">//不管他对象是否相同，react都会将setState整合，只是不一样的对象的更新不会进行覆盖，所以最后更新的时候，不管setState多少次，只重新render一次</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span> &#125;)</span><br><span class="line">       <span class="comment">// console.log(this.state.count)</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">2</span> &#125;)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">count2</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count2</span> + <span class="number">1</span> &#125;)</span><br><span class="line">      &#125;, <span class="number">500</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    handleClickFn = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//用函数式去更新状态，他会收到上一次更新的值，是最新的，所以这里会更新两次</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">(<span class="params">prevState</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">count</span>: prevState.<span class="property">count</span> + <span class="number">1</span> &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">(<span class="params">prevState</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">count</span>: prevState.<span class="property">count</span> + <span class="number">1</span> &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="comment">// console.log(&#x27;render&#x27;);</span></span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">          Count: &#123;this.state.count&#125;</span></span><br><span class="line"><span class="language-xml">          Count2:&#123;this.state.count2&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClickFn&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="实现useState"><a href="#实现useState" class="headerlink" title="实现useState()"></a>实现useState()</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">接受一个参数作为初始化值</span></span><br><span class="line"><span class="comment">返回一个数组，数组的第一个值为最新的状态 count，第二个值为一个函数用于修改状态 setCount</span></span><br><span class="line"><span class="comment">setCount 设置后需要触发重新渲染</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDom</span> <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> state = []; <span class="comment">// state数组用来保存数据</span></span><br><span class="line"><span class="keyword">let</span> index = <span class="number">0</span>; <span class="comment">// index用来对应每一个数组项</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useState</span>(<span class="params">initState</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> curIndex=index</span><br><span class="line">    state[curIndex] = state[curIndex] || initState;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setState</span>(<span class="params">newState</span>)&#123;</span><br><span class="line">        state[curIndex] = newState;</span><br><span class="line">        <span class="title function_">render</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    index+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> [state[curIndex],setState]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    index=<span class="number">0</span></span><br><span class="line">    <span class="title class_">ReactDom</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Counter1</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Counter1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>); <span class="comment">// 第一个useState的索引index</span></span><br><span class="line">    <span class="keyword">let</span> [num, setNum] = <span class="title function_">useState</span>(<span class="number">0</span>); <span class="comment">// 第二个useState的索引index</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;num&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setNum(num + 1)&#125;&gt;+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount(count + 2)&#125;&gt;+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="详解uesEffect"><a href="#详解uesEffect" class="headerlink" title="详解uesEffect()"></a>详解uesEffect()</h3><h4 id="1-useEffect执行时机"><a href="#1-useEffect执行时机" class="headerlink" title="1. useEffect执行时机"></a>1. useEffect执行时机</h4><blockquote><p>可以把useEffect看做componentDidMount，componentDidUpdate，componentWillUnmount这三个函数的组合。</p></blockquote><h4 id="2-useEffect结合异步函数"><a href="#2-useEffect结合异步函数" class="headerlink" title="2. useEffect结合异步函数"></a>2. useEffect结合异步函数</h4><p>在useRffect()中不能直接使用async函数</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">axios</span>(</span><br><span class="line">      <span class="string">&#x27;http://localhost/api/v1/search?query=redux&#x27;</span>,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="title function_">setData</span>(result.<span class="property">data</span>);</span><br><span class="line">  &#125;, []);</span><br></pre></td></tr></table></figure><p>await函数后面会返回一个promise对象，但是，在useEffect中不应该返回任何内容。这就是为什么会在控制台日志中看到以下警告：</p><blockquote><p>Warning: useEffect function must return a cleanup function or nothing. Promises and useEffect(async () &#x3D;&gt; …) are not supported, but you can call an async function inside an effect</p></blockquote><p>这就是为什么不能直接在useEffect中使用async函数，因此，我们可以不直接调用async函数，而是像下面这样：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="title function_">getData</span>=<span class="keyword">async</span> (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">          <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">axios</span>(</span><br><span class="line">      <span class="string">&#x27;http://localhost/api/v1/search?query=redux&#x27;</span>,</span><br><span class="line">    );</span><br><span class="line">    <span class="title function_">setData</span>(result.<span class="property">data</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">getData</span>()</span><br><span class="line">  &#125;, []);</span><br></pre></td></tr></table></figure><h3 id="详解useLayoutEffect"><a href="#详解useLayoutEffect" class="headerlink" title="详解useLayoutEffect()"></a>详解useLayoutEffect()</h3><p>特点：</p><ul><li><p>useEffect在浏览器渲染完成后执行</p></li><li><p>useLayoutEffect在DOM更新后执行</p></li><li><p><code>useLayoutEffect</code> 总是比 <code>useEffect</code> 先执行</p></li><li><p>使用 <code>useLayoutEffect</code> 时，里面的作用最好改变布局 ，否则会占用等待时间，导致用户体验感不好</p></li></ul><p>除非要修改DOM并且不让用户看到修改DOM的过程，才考虑使用<code>useLayoutEffect</code>，否则应当使用<code>useEffect</code>。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用useLayoutEffect</span></span><br><span class="line"><span class="keyword">import</span> &#123; useState, useEffect, useLayoutEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">useLayoutEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`useLayoutEffect - count=<span class="subst">$&#123;count&#125;</span>`</span>)</span><br><span class="line">        <span class="comment">// 耗时的操作</span></span><br><span class="line">        <span class="keyword">const</span> pre = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">        <span class="keyword">while</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>() - pre &lt; <span class="number">500</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (count === <span class="number">0</span>) &#123;    </span><br><span class="line">            <span class="title function_">setCount</span>(<span class="number">10</span> + <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">200</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, [count]);</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount(0)&#125;&gt;&#123;count&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用useEffect</span></span><br><span class="line"><span class="keyword">import</span> &#123; useState, useEffect, useLayoutEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">UseLayoutEffect</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`useEffect - count=<span class="subst">$&#123;count&#125;</span>`</span>)</span><br><span class="line">        <span class="comment">// 耗时的操作</span></span><br><span class="line">        <span class="keyword">const</span> pre = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">        <span class="keyword">while</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>() - pre &lt; <span class="number">500</span>) &#123;&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// count为0时重新生成个随机数</span></span><br><span class="line">        <span class="keyword">if</span> (count === <span class="number">0</span>) &#123;    </span><br><span class="line">            <span class="title function_">setCount</span>(<span class="number">10</span> + <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">200</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, [count]);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 点击DIV重置count</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount(0)&#125;&gt;&#123;count&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="详解useReducer"><a href="#详解useReducer" class="headerlink" title="详解useReducer()"></a>详解useReducer()</h3><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const [state, dispatch] = useReducer(reducer, initState);</span><br></pre></td></tr></table></figure><p>第一个参数是reducer函数，（state,action）&#x3D;&gt;newState</p><p>第二个参数是状态初始值</p><p>useReducer()方法返回一个数组，通过dispatch(action)触发reducer函数，reducer函数通过匹配action的类型,经过一系列操作，返回一个新的状态</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>,&#123;useReducer&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">UseReducer</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = <span class="title function_">useReducer</span>(<span class="function">(<span class="params">state,action</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;increment&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> &#123;<span class="attr">count</span>:state.<span class="property">count</span>+<span class="number">1</span>&#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;decrement&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> &#123;<span class="attr">count</span>:state.<span class="property">count</span>-<span class="number">1</span>&#125;</span><br><span class="line">            <span class="attr">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>();</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;, &#123;<span class="attr">count</span>:<span class="number">0</span>&#125;);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      Count: &#123;state.count&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123;type: &#x27;decrement&#x27;&#125;)&#125;&gt;-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123;type: &#x27;increment&#x27;&#125;)&#125;&gt;+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一个使用了useEffect、useState的示例"><a href="#一个使用了useEffect、useState的示例" class="headerlink" title="一个使用了useEffect、useState的示例"></a>一个使用了useEffect、useState的示例</h3><h4 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h4><p>组件一挂载，我们就发送请求，随着input框的输入，我们就再次像后台发送请求</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [data, setData] = <span class="title function_">useState</span>(&#123; <span class="attr">hits</span>: [] &#125;);</span><br><span class="line">  <span class="keyword">const</span> [query, setQuery] = <span class="title function_">useState</span>(<span class="string">&#x27;redux&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">fetchData</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">axios</span>(</span><br><span class="line">        <span class="string">&#x27;http://localhost/api/v1/search?query=redux&#x27;</span>,</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">      <span class="title function_">setData</span>(result.<span class="property">data</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">fetchData</span>();</span><br><span class="line">  &#125;, [query]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Fragment</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">value</span>=<span class="string">&#123;query&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onChange</span>=<span class="string">&#123;event</span> =&gt;</span> setQuery(event.target.value)&#125;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;data.hits.map(item =&gt; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item.objectID&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#123;item.url&#125;</span>&gt;</span>&#123;item.title&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        ))&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Fragment</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><p>但这样会导致一个问题，一旦更改了query值，就要重新获取数据。就会去请求后端，这样会带来比较大的访问压力。这个时候我们需要引入一个按钮，点击这个按钮再发起请求</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [data, setData] = <span class="title function_">useState</span>(&#123; <span class="attr">hits</span>: [] &#125;);</span><br><span class="line">  <span class="keyword">const</span> [query, setQuery] = <span class="title function_">useState</span>(<span class="string">&#x27;redux&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> [url, setUrl] = <span class="title function_">useState</span>(</span><br><span class="line">    <span class="string">&#x27;http://localhost/api/v1/search?query=redux&#x27;</span>,</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">fetchData</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">axios</span>(url);</span><br><span class="line"></span><br><span class="line">      <span class="title function_">setData</span>(result.<span class="property">data</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">fetchData</span>();</span><br><span class="line">  &#125;, [url]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Fragment</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">value</span>=<span class="string">&#123;query&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onChange</span>=<span class="string">&#123;event</span> =&gt;</span> setQuery(event.target.value)&#125;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">type</span>=<span class="string">&quot;button&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span></span></span><br><span class="line"><span class="language-xml">          setUrl(`http://localhost/api/v1/search?query=$&#123;query&#125;`)</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        Search</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;data.hits.map(item =&gt; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item.objectID&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#123;item.url&#125;</span>&gt;</span>&#123;item.title&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        ))&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Fragment</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="处理Loading"><a href="#处理Loading" class="headerlink" title="处理Loading"></a>处理Loading</h5><p>良好的用户体验是需要在请求后端数据，数据还没有返回时展现loading的状态，因此，我们还需要添加一个loading的state</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Fragment</span>, useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [data, setData] = <span class="title function_">useState</span>(&#123; <span class="attr">hits</span>: [] &#125;);</span><br><span class="line">  <span class="keyword">const</span> [query, setQuery] = <span class="title function_">useState</span>(<span class="string">&#x27;redux&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> [url, setUrl] = <span class="title function_">useState</span>(</span><br><span class="line">    <span class="string">&#x27;http://hn.algolia.com/api/v1/search?query=redux&#x27;</span>,</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">const</span> [isLoading, setIsLoading] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">fetchData</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="title function_">setIsLoading</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">axios</span>(url);</span><br><span class="line"></span><br><span class="line">      <span class="title function_">setData</span>(result.<span class="property">data</span>);</span><br><span class="line">      <span class="title function_">setIsLoading</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">fetchData</span>();</span><br><span class="line">  &#125;, [url]);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Fragment</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">value</span>=<span class="string">&#123;query&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onChange</span>=<span class="string">&#123;event</span> =&gt;</span> setQuery(event.target.value)&#125;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">type</span>=<span class="string">&quot;button&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span></span></span><br><span class="line"><span class="language-xml">          setUrl(`http://localhost/api/v1/search?query=$&#123;query&#125;`)</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        Search</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      &#123;isLoading ? (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>Loading ...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ) : (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;data.hits.map(item =&gt; (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item.objectID&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#123;item.url&#125;</span>&gt;</span>&#123;item.title&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          ))&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      )&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Fragment</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><h5 id="处理Error"><a href="#处理Error" class="headerlink" title="处理Error"></a>处理Error</h5><p>使用useState来创建一个新的state，然后在useEffect中特定的位置来更新这个state。由于我们使用了async&#x2F;await，使用try…catch捕获错误</p><h5 id="转换为表单提交"><a href="#转换为表单提交" class="headerlink" title="转换为表单提交"></a>转换为表单提交</h5><p>通常，我们不仅会用到上面的输入框和按钮，更多的时候是一张表单，所以也可以在表单中使用useEffect来处理数据请求，逻辑是相同的：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Fragment</span>, useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [data, setData] = <span class="title function_">useState</span>(&#123; <span class="attr">hits</span>: [] &#125;);</span><br><span class="line">  <span class="keyword">const</span> [query, setQuery] = <span class="title function_">useState</span>(<span class="string">&#x27;redux&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> [url, setUrl] = <span class="title function_">useState</span>(</span><br><span class="line">    <span class="string">&#x27;http://localhost/api/v1/search?query=redux&#x27;</span>,</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">const</span> [isLoading, setIsLoading] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">const</span> [isError, setIsError] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">fetchData</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="title function_">setIsError</span>(<span class="literal">false</span>);</span><br><span class="line">      <span class="title function_">setIsLoading</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">axios</span>(url);</span><br><span class="line"></span><br><span class="line">        <span class="title function_">setData</span>(result.<span class="property">data</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="title function_">setIsError</span>(<span class="literal">true</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="title function_">setIsLoading</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">fetchData</span>();</span><br><span class="line">  &#125;, [url]);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Fragment</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;<span class="name">form</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onSubmit</span>=<span class="string">&#123;(event)</span> =&gt;</span></span></span><br><span class="line"><span class="language-xml">   event.preventDefault();</span></span><br><span class="line"><span class="language-xml">          setUrl(`http://localhost/api/v1/search?query=$&#123;query&#125;`)</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">value</span>=<span class="string">&#123;query&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onChange</span>=<span class="string">&#123;event</span> =&gt;</span> setQuery(event.target.value)&#125;</span></span><br><span class="line"><span class="language-xml">        /&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Search<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      &#123;isError &amp;&amp; <span class="tag">&lt;<span class="name">div</span>&gt;</span>Something went wrong ...<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      &#123;isLoading ? (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>Loading ...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ) : (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;data.hits.map(item =&gt; (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item.objectID&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#123;item.url&#125;</span>&gt;</span>&#123;item.title&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          ))&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      )&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Fragment</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><p>上面的代码基本实现了功能，下面我们抽取功能实现自定义hook这个时候，方便复用和解耦：</p><h4 id="自定义hooks"><a href="#自定义hooks" class="headerlink" title="自定义hooks"></a>自定义hooks</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> useHackerNewsApi = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [data, setData] = <span class="title function_">useState</span>(&#123; <span class="attr">hits</span>: [] &#125;);</span><br><span class="line">  <span class="keyword">const</span> [url, setUrl] = <span class="title function_">useState</span>(</span><br><span class="line">    <span class="string">&#x27;http://localhost/api/v1/search?query=redux&#x27;</span>,</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">const</span> [isLoading, setIsLoading] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">const</span> [isError, setIsError] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">fetchData</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="title function_">setIsError</span>(<span class="literal">false</span>);</span><br><span class="line">      <span class="title function_">setIsLoading</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">axios</span>(url);</span><br><span class="line"></span><br><span class="line">        <span class="title function_">setData</span>(result.<span class="property">data</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="title function_">setIsError</span>(<span class="literal">true</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="title function_">setIsLoading</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">fetchData</span>();</span><br><span class="line">  &#125;, [url]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">doFetch</span> = (<span class="params">url</span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setUrl</span>(url);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; data, isLoading, isError, doFetch &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在组件中引入</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [query, setQuery] = <span class="title function_">useState</span>(<span class="string">&#x27;redux&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> &#123; data, isLoading, isError, doFetch &#125; = <span class="title function_">useHackerNewsApi</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Fragment</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">form</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onSubmit</span>=<span class="string">&#123;(event)</span> =&gt;</span></span></span><br><span class="line"><span class="language-xml">   event.preventDefault();</span></span><br><span class="line"><span class="language-xml">           doFetch(</span></span><br><span class="line"><span class="language-xml">            `http://localhost/api/v1/search?query=$&#123;query&#125;`,</span></span><br><span class="line"><span class="language-xml">          );</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">value</span>=<span class="string">&#123;query&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onChange</span>=<span class="string">&#123;event</span> =&gt;</span> setQuery(event.target.value)&#125;</span></span><br><span class="line"><span class="language-xml">        /&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Search<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">...</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Fragment</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用useReducer整合逻辑"><a href="#使用useReducer整合逻辑" class="headerlink" title="使用useReducer整合逻辑"></a>使用useReducer整合逻辑</h4><p>到目前为止，我们已经使用了各种state hooks来管理数据，包括loading、error、data等状态。但是我们可以看到，这三个有关联的状态确是分散的，它们通过分离的useState来创建，为了有关联的状态整合到一起，我们需要用到useReducer。</p><h4 id="取消数据请求"><a href="#取消数据请求" class="headerlink" title="取消数据请求"></a>取消数据请求</h4><p>React中的一种很常见的问题是：如果在组件中发送一个请求，在请求还没有返回的时候卸载了组件，这个时候还会尝试设置这个状态，会报错。我们需要在hooks中处理这种情况，可以看下是怎样处理的</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> useHackerNewsApi = <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">dataFetchReducer</span> = (<span class="params">state, action</span>) =&gt; &#123;</span><br><span class="line">   <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;FETCH_INIT&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        <span class="attr">isLoading</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">isError</span>: <span class="literal">false</span></span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;FETCH_SUCCESS&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        <span class="attr">isLoading</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">isError</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">data</span>: action.<span class="property">payload</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;FETCH_FAILURE&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        <span class="attr">isLoading</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">isError</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;; </span><br><span class="line"> <span class="keyword">const</span> <span class="title function_">useDataApi</span>=(<span class="params">initUrl,initData</span>)=&gt;&#123;</span><br><span class="line">     <span class="keyword">let</span> [url,setUrl]=<span class="title function_">useState</span>(initUrl)</span><br><span class="line">     <span class="keyword">let</span> [state,dispatch]=<span class="title function_">useReducer</span>(dataFetchReducer,&#123;</span><br><span class="line">         <span class="attr">isLoading</span>:<span class="literal">false</span>,</span><br><span class="line">         <span class="attr">isError</span>:<span class="literal">false</span>,</span><br><span class="line">         <span class="attr">data</span>:initData</span><br><span class="line">     &#125;)</span><br><span class="line">     <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">         <span class="keyword">let</span> didCancel=<span class="literal">false</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">fetchData</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line"> <span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;FETCH_INIT&#x27;</span> &#125;);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">axios</span>(url);</span><br><span class="line"><span class="keyword">if</span>(!didCancel)&#123;</span><br><span class="line">           <span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;FETCH_SUCCESS&#x27;</span>, <span class="attr">payload</span>: result.<span class="property">data</span> &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">          <span class="keyword">if</span>(!didCancel)&#123;</span><br><span class="line">               <span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;FETCH_FAILURE&#x27;</span> &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">setIsLoading</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">fetchData</span>();</span><br><span class="line">         <span class="comment">//componnetWillUnmount</span></span><br><span class="line">         <span class="keyword">return</span> <span class="function">()=&gt;</span>&#123;</span><br><span class="line">             didCancel=<span class="literal">true</span></span><br><span class="line">         &#125;</span><br><span class="line">  &#125;, [url]);</span><br><span class="line">       <span class="keyword">const</span> <span class="title function_">doFetch</span> = (<span class="params">url</span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setUrl</span>(url);</span><br><span class="line">  &#125;;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> &#123; ...state, doFetch &#125;;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h3 id="详解useContext"><a href="#详解useContext" class="headerlink" title="详解useContext()"></a>详解useContext()</h3><p>当组件之间想要共享状态，我们就可以使用useContext()</p><p>用法：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">MyContext</span>=<span class="title class_">React</span>.<span class="title function_">createContext</span>(defaultValue)</span><br><span class="line"><span class="keyword">let</span> value=<span class="title function_">useContext</span>(<span class="title class_">MyContext</span>)</span><br></pre></td></tr></table></figure><p>解释：useContext()接收一个context对象，并返回该context的当前值</p><p>当前的context值由上层组件中<strong>距离当前组件最近</strong>的Provider的props决定,如果没有匹配到Provider时，使用默认的defalutValue</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> themes=&#123;</span><br><span class="line">    <span class="attr">light</span>:&#123;</span><br><span class="line">        <span class="attr">background</span>:<span class="string">&#x27;#eee&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">dark</span>:&#123;</span><br><span class="line">        <span class="attr">background</span>:<span class="string">&#x27;#222&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ThemContext</span>=<span class="title class_">React</span>.<span class="title function_">createContext</span>(themes.<span class="property">light</span>)</span><br><span class="line"><span class="comment">//第一层组件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ThemContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;themes.dark&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Child</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ThemContext.Provider</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第二层组件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">props</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">GrandSon</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第三层组件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">GrandSon</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> theme=<span class="title function_">useContext</span>(<span class="title class_">ThemeContext</span>)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">background:</span> <span class="attr">theme.background</span>&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      I am styled by theme context!</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不使用useContext()的写法</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> themes=&#123;</span><br><span class="line">    <span class="attr">light</span>:&#123;</span><br><span class="line">        <span class="attr">background</span>:<span class="string">&#x27;#eee&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">dark</span>:&#123;</span><br><span class="line">        <span class="attr">background</span>:<span class="string">&#x27;#222&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ThemContext</span>=<span class="title class_">React</span>.<span class="title function_">createContext</span>(themes.<span class="property">light</span>)</span><br><span class="line"><span class="comment">//第一层组件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ThemContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;themes.dark&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Child</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ThemContext.Provider</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第二层组件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">props</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">GrandSon</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第三层组件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">GrandSon</span>(<span class="params"></span>)&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">ThemContext.Consumer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;</span></span><br><span class="line"><span class="language-xml">               value=&gt;(</span></span><br><span class="line"><span class="language-xml">                 <span class="tag">&lt;<span class="name">button</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">background:</span> <span class="attr">value.background</span>&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      I am styled by theme context!</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                ) </span></span><br><span class="line"><span class="language-xml">            &#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ThemContext.Consumer</span>&gt;</span></span></span><br><span class="line">   </span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="详解useDeferredValue"><a href="#详解useDeferredValue" class="headerlink" title="详解useDeferredValue"></a>详解useDeferredValue</h3><p>React18引入了Concurrent模式（并发模式）</p><p>useDeferredValue的作用：他可以让我们延迟渲染不紧急的部分，延迟的渲染会在紧急的部分先出现在浏览器屏幕之后才开始，并且他是可以中断的，不会阻塞用户的输入</p><h3 id="在函数组件中实现防抖"><a href="#在函数组件中实现防抖" class="headerlink" title="在函数组件中实现防抖"></a>在函数组件中实现防抖</h3><p>下面代码会导致防抖函数失去效果</p><p>原因如下：</p><p>因为使用了useEffect，在这里面写了一个定时器去更新另一个对象的状态，就会导致页面重新render,就会导致防抖函数一直重新绑定，这样就导致防抖函数中的timer不能起到缓存效果，所以解决方案就是使用useRef(),让timer只引用一次</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [counter1, setCounter1] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [counter2, setCounter2] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleClick = <span class="title function_">useDebounce</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">setCounter1</span>(counter1 + <span class="number">1</span>)</span><br><span class="line">  &#125;, <span class="number">2000</span>)</span><br><span class="line"> <span class="comment">// 补充一个函数，加载后会自动更新counter2的数值 </span></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> t = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">setCounter2</span>(<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">1</span>)</span><br><span class="line">    &#125;, <span class="number">500</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="built_in">clearInterval</span>(t)</span><br><span class="line">  &#125;, [])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">padding:</span> <span class="attr">30</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">onClick</span>=<span class="string">&#123;function()</span> &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">handleClick</span>()</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span>click<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;counter1&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;counter2&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>实现防抖函数</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>,&#123;useState,useRef,useEffect&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Debounce</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [counter1, setCounter1] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">const</span> [counter2, setCounter2] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">useDebounce</span>(<span class="params">fn, delay</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; current &#125; = <span class="title function_">useRef</span>(&#123; <span class="attr">timer</span>: <span class="literal">null</span> &#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (current.<span class="property">timer</span>) &#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(current.<span class="property">timer</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        current.<span class="property">timer</span> = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        fn.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">        &#125;, delay);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">     <span class="comment">// 补充一个函数，加载后会自动更新counter2的数值 </span></span><br><span class="line">      <span class="title function_">useEffect</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> t = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">setCounter2</span>(<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">1</span>)</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="built_in">clearInterval</span>(t)</span><br><span class="line">      &#125;, [])</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">padding:</span> <span class="attr">30</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">onClick</span>=<span class="string">&#123;useDebounce(()</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-xml">                    setCounter1(x=&gt;x+1)</span></span><br><span class="line"><span class="language-xml">                &#125;,2000)&#125;</span></span><br><span class="line"><span class="language-xml">            &gt;click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;counter1&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;counter2&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在函数组件中实现节流"><a href="#在函数组件中实现节流" class="headerlink" title="在函数组件中实现节流"></a>在函数组件中实现节流</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>,&#123;useState,useRef,useEffect&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Debounce</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [counter1, setCounter1] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">const</span> [counter2, setCounter2] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Throttle</span>(<span class="params">fn, time</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> begin=<span class="title function_">useRef</span>(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">let</span> curTime = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line">          <span class="keyword">if</span> (curTime - begin.<span class="property">current</span> &gt; time) &#123;</span><br><span class="line">            fn.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">            begin.<span class="property">current</span> = curTime;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">     <span class="comment">// 补充一个函数，加载后会自动更新counter2的数值 </span></span><br><span class="line">      <span class="title function_">useEffect</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> t = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">setCounter2</span>(<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">1</span>)</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="built_in">clearInterval</span>(t)</span><br><span class="line">      &#125;, [])</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">padding:</span> <span class="attr">30</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">onClick</span>=<span class="string">&#123;Throttle(()</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-xml">                    setCounter1(x=&gt;x+1)</span></span><br><span class="line"><span class="language-xml">                &#125;,2000)&#125;</span></span><br><span class="line"><span class="language-xml">            &gt;click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;counter1&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;counter2&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首页 滚动条</p><p>标题颜色 做差异</p><p>按钮颜色做成亮色</p><p>跳转到新页面</p><p>发布页面</p><p>title 边距 调大</p><p>简介适配 </p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Hooks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法</title>
      <link href="/2022/10/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
      <url>/2022/10/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h3><h4 id="二叉树的创建"><a href="#二叉树的创建" class="headerlink" title="二叉树的创建"></a>二叉树的创建</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">TreeCode</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//初始化二叉树</span></span><br><span class="line">    <span class="keyword">let</span> <span class="title class_">BiTree</span>=<span class="keyword">function</span>(<span class="params">val</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">data</span>=val</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">lChild</span>=<span class="literal">null</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">rChild</span>=<span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">createTree</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> biTree=<span class="keyword">new</span> <span class="title class_">BiTree</span>(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        biTree.<span class="property">rChild</span>=<span class="keyword">new</span> <span class="title class_">BiTree</span>(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">        biTree.<span class="property">rChild</span>.<span class="property">lChild</span>=<span class="keyword">new</span> <span class="title class_">BiTree</span>(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> biTree</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="递归遍历二叉树"><a href="#递归遍历二叉树" class="headerlink" title="递归遍历二叉树"></a>递归遍历二叉树</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//前序遍历：根左右</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ProTraverse</span>(<span class="params">biTree</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> res=[]</span><br><span class="line">    <span class="keyword">let</span> <span class="title function_">proOrder</span>=(<span class="params">biTree</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(biTree==<span class="literal">null</span>) <span class="keyword">return</span></span><br><span class="line">    res.<span class="title function_">push</span>(biTree.<span class="property">data</span>)</span><br><span class="line">    <span class="title function_">proOrder</span>(biTree.<span class="property">lChild</span>)</span><br><span class="line">    <span class="title function_">proOrder</span>(biTree.<span class="property">rChild</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">proOrder</span>(biTree)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中序遍历：左根右</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">inorderTraversal</span>(<span class="params">biTree</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = [];</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">inorder</span> = (<span class="params">biTree</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (!biTree) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">inorder</span>(biTree.<span class="property">lChild</span>);</span><br><span class="line">        res.<span class="title function_">push</span>(biTree.<span class="property">data</span>);</span><br><span class="line">        <span class="title function_">inorder</span>(biTree.<span class="property">rChild</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">inorder</span>(biTree);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//后序遍历：左右根</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">PostTraverse</span>(<span class="params">biTree</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> res=[]</span><br><span class="line">    <span class="keyword">let</span> <span class="title function_">postOrder</span>=(<span class="params">biTree</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(biTree==<span class="literal">null</span>) <span class="keyword">return</span></span><br><span class="line">   </span><br><span class="line">    <span class="title function_">postOrder</span>(biTree.<span class="property">lChild</span>)</span><br><span class="line">    <span class="title function_">postOrder</span>(biTree.<span class="property">rChild</span>)</span><br><span class="line">    res.<span class="title function_">push</span>(biTree.<span class="property">data</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">postOrder</span>(biTree)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> myTree = <span class="keyword">new</span> <span class="title class_">TreeCode</span>();</span><br><span class="line"><span class="keyword">let</span> res=<span class="title function_">inorderTraversal</span>(myTree.<span class="title function_">createTree</span>());</span><br><span class="line"><span class="keyword">let</span> res1=<span class="title class_">ProTraverse</span>(myTree.<span class="title function_">createTree</span>())</span><br><span class="line"><span class="keyword">let</span> res2=<span class="title class_">PostTraverse</span>(myTree.<span class="title function_">createTree</span>())</span><br></pre></td></tr></table></figure><h4 id="迭代遍历二叉树"><a href="#迭代遍历二叉树" class="headerlink" title="迭代遍历二叉树"></a>迭代遍历二叉树</h4><p><strong>前序遍历</strong></p><p>1、首先将中间节点入栈</p><p>2、出栈一个节点，将该节点的右节点先入栈，然后再将左节点入栈。为什么右节点先入栈？这样出栈时才是左节点先出栈，右节点后出栈，也就是前序遍历的‘中左右’</p><p>3、栈为空时就结束</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> preorderTraversal = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> []</span><br><span class="line">    <span class="keyword">let</span> stack = []</span><br><span class="line">    <span class="keyword">let</span> ans = []</span><br><span class="line">    stack.<span class="title function_">push</span>(root)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(stack.<span class="property">length</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> node = stack.<span class="title function_">pop</span>()</span><br><span class="line">        ans.<span class="title function_">push</span>(node.<span class="property">data</span>)</span><br><span class="line">        <span class="keyword">if</span>(node.<span class="property">rChild</span>) stack.<span class="title function_">push</span>(node.<span class="property">rChild</span>)</span><br><span class="line">        <span class="keyword">if</span>(node.<span class="property">lChild</span>) stack.<span class="title function_">push</span>(node.<span class="property">lChild</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> res1=preorderTraversal (myTree.<span class="title function_">createTree</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res1);</span><br></pre></td></tr></table></figure><p><strong>中序遍历</strong></p><p>由于我们访问二叉树是从根节点，也就是中间节点开始，但是中序遍历要求先遍历左节点，因此我们需要记录中间节点，并先去访问它的左子树。<br>我们使用栈来记录节点<br>1、只要当前遍历到的节点不为空，就要记录该节点并且去访问该节点的左节点。<br>2、前节点为空时，说明左节点为空，需要将中间节点的值加入结果数组，此时的中间节点位于栈顶，将中间节点出栈，将它的值加入结果数组。<br>3、接下来访问右节点，右节点不为空，回到第一步，右节点为空，回到第二步。<br>当栈为空时结束遍历。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//中序遍历迭代实现</span></span><br><span class="line"><span class="keyword">var</span> inorderTraversal = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> stack = []</span><br><span class="line">    <span class="keyword">let</span> ans = []</span><br><span class="line">    <span class="comment">// cur为当前节点</span></span><br><span class="line">    <span class="keyword">let</span> cur = root</span><br><span class="line">    <span class="keyword">while</span>(cur || stack.<span class="property">length</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur)&#123;</span><br><span class="line">            stack.<span class="title function_">push</span>(cur)</span><br><span class="line">            <span class="comment">// 遍历左节点</span></span><br><span class="line">            cur = cur.<span class="property">lChild</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;  <span class="comment">//当前节点为空，要处理栈顶（中间）节点</span></span><br><span class="line">            <span class="keyword">const</span> node = stack.<span class="title function_">pop</span>()</span><br><span class="line">            ans.<span class="title function_">push</span>(node.<span class="property">data</span>)</span><br><span class="line">            <span class="comment">// 中间节点遍历完，遍历右子树</span></span><br><span class="line">            cur = node.<span class="property">rChild</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> myTree = <span class="keyword">new</span> <span class="title class_">TreeCode</span>();</span><br><span class="line"><span class="keyword">let</span> res=<span class="title function_">inorderTraversal</span>(myTree.<span class="title function_">createTree</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br></pre></td></tr></table></figure><p><strong>后序遍历</strong></p><p>在前序遍历的基础上，先将左孩子入栈</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> postorderTraversal = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> []</span><br><span class="line">    <span class="keyword">let</span> stack = []</span><br><span class="line">    <span class="keyword">let</span> ans = []</span><br><span class="line">    stack.<span class="title function_">push</span>(root)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(stack.<span class="property">length</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> node = stack.<span class="title function_">pop</span>()</span><br><span class="line">        ans.<span class="title function_">push</span>(node.<span class="property">data</span>)</span><br><span class="line">         <span class="keyword">if</span>(node.<span class="property">lChild</span>) stack.<span class="title function_">push</span>(node.<span class="property">lChild</span>)</span><br><span class="line">        <span class="keyword">if</span>(node.<span class="property">rChild</span>) stack.<span class="title function_">push</span>(node.<span class="property">rChild</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> res2=postorderTraversal (myTree.<span class="title function_">createTree</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res2);</span><br></pre></td></tr></table></figure><h3 id="重构二叉树"><a href="#重构二叉树" class="headerlink" title="重构二叉树"></a>重构二叉树</h3><h4 id="根据前序遍历和中序遍历实现二叉树"><a href="#根据前序遍历和中序遍历实现二叉树" class="headerlink" title="根据前序遍历和中序遍历实现二叉树"></a>根据前序遍历和中序遍历实现二叉树</h4><p>例如输入前序遍历序列<code>&#123;1,2,4,7,3,5,6,8&#125;</code>和中序遍历序列<code>&#123;4,7,2,1,5,3,8,6&#125;</code>，则重建二叉树并返回。</p><ul><li>前序遍历找到根结点<code>root</code></li><li>找到<code>root</code>在中序遍历的位置 -&gt; 左子树的长度和右子树的长度</li><li>截取左子树的中序遍历、右子树的中序遍历</li><li>截取左子树的前序遍历、右子树的前序遍历</li><li>递归重建二叉树</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化二叉树</span></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">TreeNode</span>=<span class="keyword">function</span>(<span class="params">val</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">data</span>=val</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">left</span>=<span class="literal">null</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">right</span>=<span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reConBiTree</span>(<span class="params">pre,vin</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(pre.<span class="property">length</span>===<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    <span class="keyword">if</span>(pre.<span class="property">length</span>===<span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(pre[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">let</span> value=pre[<span class="number">0</span>]</span><br><span class="line">    <span class="comment">//得到根节点在中序遍历的位置</span></span><br><span class="line">    <span class="keyword">let</span> index=vin.<span class="title function_">indexOf</span>(value)</span><br><span class="line">    <span class="comment">//截取中序遍历中的左子树</span></span><br><span class="line">    <span class="keyword">let</span> vinLeft=vin.<span class="title function_">slice</span>(<span class="number">0</span>,index)</span><br><span class="line">    <span class="comment">//截取中序遍历中的右子树</span></span><br><span class="line">    <span class="keyword">let</span> vinRight=vin.<span class="title function_">slice</span>(index+<span class="number">1</span>)</span><br><span class="line">    <span class="comment">//截取前序遍历中的左子树</span></span><br><span class="line">    <span class="keyword">let</span> preLeft=pre.<span class="title function_">slice</span>(<span class="number">1</span>,index+<span class="number">1</span>)</span><br><span class="line">    <span class="comment">//截取前序遍历中的右子树</span></span><br><span class="line">    <span class="keyword">let</span> preRight=pre.<span class="title function_">slice</span>(index+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">let</span> node=<span class="keyword">new</span> <span class="title class_">TreeNode</span>(value)</span><br><span class="line">    node.<span class="property">left</span>=<span class="title function_">reConBiTree</span>(preLeft, vinLeft);</span><br><span class="line">    node.<span class="property">right</span>=<span class="title function_">reConBiTree</span>(preRight, vinRight);</span><br><span class="line">    <span class="keyword">return</span> node</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> pre=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>]</span><br><span class="line"><span class="keyword">let</span> ino=[<span class="number">4</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">6</span>]</span><br><span class="line"><span class="keyword">let</span> res= <span class="title function_">reConBiTree</span>(pre,ino)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br></pre></td></tr></table></figure><h4 id="根据中序遍历和后序遍历重构二叉树"><a href="#根据中序遍历和后序遍历重构二叉树" class="headerlink" title="根据中序遍历和后序遍历重构二叉树"></a>根据中序遍历和后序遍历重构二叉树</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化二叉树</span></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">TreeNode</span>=<span class="keyword">function</span>(<span class="params">val</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">data</span>=val</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">left</span>=<span class="literal">null</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">right</span>=<span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reConBiTree</span>(<span class="params">vin,post</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(post.<span class="property">length</span>===<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    <span class="keyword">let</span> value=post.<span class="title function_">pop</span>()</span><br><span class="line">    <span class="comment">//得到根节点在中序遍历的位置</span></span><br><span class="line">    <span class="keyword">let</span> index=vin.<span class="title function_">indexOf</span>(value)</span><br><span class="line">    <span class="comment">//截取中序遍历中的左子树</span></span><br><span class="line">    <span class="keyword">let</span> vinLeft=vin.<span class="title function_">slice</span>(<span class="number">0</span>,index)</span><br><span class="line">    <span class="comment">//截取中序遍历中的右子树</span></span><br><span class="line">    <span class="keyword">let</span> vinRight=vin.<span class="title function_">slice</span>(index+<span class="number">1</span>)</span><br><span class="line">    <span class="comment">//截取后序遍历中的左子树</span></span><br><span class="line">    <span class="keyword">let</span> postLeft=post.<span class="title function_">slice</span>(<span class="number">0</span>,index)</span><br><span class="line">    <span class="comment">//截取后序遍历中的右子树</span></span><br><span class="line">    <span class="keyword">let</span> postRight=post.<span class="title function_">slice</span>(index)</span><br><span class="line">    <span class="keyword">let</span> node=<span class="keyword">new</span> <span class="title class_">TreeNode</span>(value)</span><br><span class="line">    node.<span class="property">left</span>=<span class="title function_">reConBiTree</span>(vinLeft, postLeft);</span><br><span class="line">    node.<span class="property">right</span>=<span class="title function_">reConBiTree</span>(vinRight, postRight);</span><br><span class="line">    <span class="keyword">return</span> node</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> ino=[<span class="number">9</span>,<span class="number">3</span>,<span class="number">15</span>,<span class="number">20</span>,<span class="number">7</span>]</span><br><span class="line"><span class="keyword">let</span> post=[<span class="number">9</span>,<span class="number">15</span>,<span class="number">7</span>,<span class="number">20</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> res= <span class="title function_">reConBiTree</span>(ino,post)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br></pre></td></tr></table></figure><h3 id="对称二叉树"><a href="#对称二叉树" class="headerlink" title="对称二叉树"></a>对称二叉树</h3><img src="/2022/10/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Web\自己总结的学习记录\md图片\QQ截图20220715190124.png" style="zoom: 50%;"><p>如图，1为对称二叉树，2、3都不是。</p><ul><li>两个根结点相等</li><li>左子树的右节点和右子树的左节点相同。</li><li>右子树的左节点和左子树的右节点相同。</li></ul><p>递归所有节点满足以上条件即二叉树对称。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> isSymmetric=<span class="keyword">function</span>(<span class="params">root</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">check</span>(root.<span class="property">lChild</span>,root.<span class="property">rChild</span>)</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">check</span>(<span class="params">left,right</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(left==<span class="literal">null</span>&amp;&amp;right==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        <span class="keyword">if</span>(left==<span class="literal">null</span>||right==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        <span class="keyword">return</span> left.<span class="property">data</span>==right.<span class="property">data</span>&amp;&amp;<span class="title function_">check</span>(left.<span class="property">left</span>,right.<span class="property">right</span>)&amp;&amp;<span class="title function_">check</span>(left.<span class="property">right</span>,right.<span class="property">left</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> myTree = <span class="keyword">new</span> <span class="title class_">TreeCode</span>();</span><br><span class="line"><span class="keyword">let</span> res=<span class="title function_">isSymmetric</span>(myTree.<span class="title function_">createTree</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br></pre></td></tr></table></figure><h3 id="镜像二叉树"><a href="#镜像二叉树" class="headerlink" title="镜像二叉树"></a>镜像二叉树</h3><p>操作给定的二叉树，将其变换为源二叉树的镜像。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  源二叉树 </span><br><span class="line">    8</span><br><span class="line">   /  \</span><br><span class="line">  6   10</span><br><span class="line"> / \  / \</span><br><span class="line">5  7 9 11</span><br><span class="line">镜像二叉树</span><br><span class="line">    8</span><br><span class="line">   /  \</span><br><span class="line">  10   6</span><br><span class="line"> / \  / \</span><br><span class="line">11 9 7  5</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>思路：递归交换二叉树所有节点左右节点的位置</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">TreeCode</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//初始化二叉树</span></span><br><span class="line">    <span class="keyword">let</span> <span class="title class_">BiTree</span>=<span class="keyword">function</span>(<span class="params">val</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">data</span>=val</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">lChild</span>=<span class="literal">null</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">rChild</span>=<span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">createTree</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> biTree=<span class="keyword">new</span> <span class="title class_">BiTree</span>(<span class="string">&#x27;8&#x27;</span>)</span><br><span class="line">        biTree.<span class="property">lChild</span>=<span class="keyword">new</span> <span class="title class_">BiTree</span>(<span class="string">&#x27;6&#x27;</span>)</span><br><span class="line">        biTree.<span class="property">rChild</span>=<span class="keyword">new</span> <span class="title class_">BiTree</span>(<span class="string">&#x27;10&#x27;</span>)</span><br><span class="line">        biTree.<span class="property">lChild</span>.<span class="property">lChild</span>=<span class="keyword">new</span> <span class="title class_">BiTree</span>(<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">        biTree.<span class="property">lChild</span>.<span class="property">rChild</span>=<span class="keyword">new</span> <span class="title class_">BiTree</span>(<span class="string">&#x27;7&#x27;</span>)</span><br><span class="line">        biTree.<span class="property">rChild</span>.<span class="property">lChild</span>=<span class="keyword">new</span> <span class="title class_">BiTree</span>(<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        biTree.<span class="property">rChild</span>.<span class="property">rChild</span>=<span class="keyword">new</span> <span class="title class_">BiTree</span>(<span class="string">&#x27;11&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> biTree</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Mirror</span>(<span class="params">root</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> temp=root.<span class="property">rChild</span></span><br><span class="line">    root.<span class="property">rChild</span>=root.<span class="property">lChild</span></span><br><span class="line">    root.<span class="property">lChild</span>=temp</span><br><span class="line">    <span class="title class_">Mirror</span>(root.<span class="property">lChild</span>)</span><br><span class="line">    <span class="title class_">Mirror</span>(root.<span class="property">rChild</span>)</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> myTree = <span class="keyword">new</span> <span class="title class_">TreeCode</span>();</span><br><span class="line"><span class="keyword">let</span> res1=<span class="title class_">Mirror</span>(myTree.<span class="title function_">createTree</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res1);</span><br></pre></td></tr></table></figure><h3 id="二叉排序树"><a href="#二叉排序树" class="headerlink" title="二叉排序树"></a>二叉排序树</h3><p>给定一棵二叉搜索树，请找出其中的第k小的结点。 例如， （5，3，7，2，4，6，8） 中，按结点数值大小顺序第三小结点的值为4。</p><p>思路：通过输入的序列形成二叉树后，进行中序遍历，得到由小到大排序的数组，然后再根据k得到是第几个，然后返回</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">TreeCode</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//初始化二叉树</span></span><br><span class="line">    <span class="keyword">let</span> <span class="title class_">BiTree</span>=<span class="keyword">function</span>(<span class="params">val</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">data</span>=val</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">lChild</span>=<span class="literal">null</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">rChild</span>=<span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">createTree</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> biTree=<span class="keyword">new</span> <span class="title class_">BiTree</span>(<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">        biTree.<span class="property">lChild</span>=<span class="keyword">new</span> <span class="title class_">BiTree</span>(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">        biTree.<span class="property">rChild</span>=<span class="keyword">new</span> <span class="title class_">BiTree</span>(<span class="string">&#x27;7&#x27;</span>)</span><br><span class="line">        biTree.<span class="property">lChild</span>.<span class="property">lChild</span>=<span class="keyword">new</span> <span class="title class_">BiTree</span>(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">        biTree.<span class="property">lChild</span>.<span class="property">rChild</span>=<span class="keyword">new</span> <span class="title class_">BiTree</span>(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">        biTree.<span class="property">rChild</span>.<span class="property">lChild</span>=<span class="keyword">new</span> <span class="title class_">BiTree</span>(<span class="string">&#x27;6&#x27;</span>)</span><br><span class="line">        biTree.<span class="property">rChild</span>.<span class="property">rChild</span>=<span class="keyword">new</span> <span class="title class_">BiTree</span>(<span class="string">&#x27;8&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> biTree</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Knode</span>(<span class="params">root,k</span>)&#123;</span><br><span class="line"><span class="keyword">let</span> arr=[]</span><br><span class="line"><span class="comment">//进行中序遍历得到由小到大顺序排列的数组</span></span><br><span class="line"><span class="title function_">inorderTraversal</span>(root,arr)</span><br><span class="line"><span class="keyword">if</span>(k&gt;<span class="number">0</span>&amp;&amp;k&lt;arr.<span class="property">length</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> arr[k-<span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">inorderTraversal</span>(<span class="params">biTree,arr</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">inorder</span> = (<span class="params">biTree</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (!biTree) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">inorder</span>(biTree.<span class="property">lChild</span>);</span><br><span class="line">        arr.<span class="title function_">push</span>(biTree.<span class="property">data</span>);</span><br><span class="line">        <span class="title function_">inorder</span>(biTree.<span class="property">rChild</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">inorder</span>(biTree);</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> myTree = <span class="keyword">new</span> <span class="title class_">TreeCode</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> res=<span class="title class_">Knode</span>(myTree.<span class="title function_">createTree</span>(),<span class="number">5</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br></pre></td></tr></table></figure><h4 id="二叉排序树的后序遍历"><a href="#二叉排序树的后序遍历" class="headerlink" title="二叉排序树的后序遍历"></a>二叉排序树的后序遍历</h4><p>输入一个整数数组，判断该数组是不是某二叉排序的后序遍历的结果。如果是则输出true,否则输出false。假设输入的数组的任意两个数字都互不相同。</p><p>思路：</p><p>1.后序遍历：分成三部分：最后一个节点为根节点，第二部分为左子树的值比根节点都小，第三部分为右子树的值比根节点都大。</p><p>2.先检测左子树，左侧比根节点小的值都判定为左子树。</p><p>3.除最后一个节点外和左子树外的其他值为右子树，右子树有一个比根节点小，则返回false。</p><p>4.若存在，左、右子树，递归检测左、右子树是否复合规范。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">VerifySquenceOfBST</span>(<span class="params">seq</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(seq&amp;&amp;seq.<span class="property">length</span>&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//获取根节点</span></span><br><span class="line">        <span class="keyword">let</span> root=seq[seq.<span class="property">length</span>-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;seq.<span class="property">length</span>-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(seq[i]&gt;root)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> j=i;j&lt;seq.<span class="property">length</span>-<span class="number">1</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(seq[j]&lt;root) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">let</span> left=<span class="literal">true</span></span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">0</span>) left=<span class="title class_">VerifySquenceOfBST</span>(seq.<span class="title function_">slice</span>(<span class="number">0</span>,i))</span><br><span class="line">        <span class="keyword">let</span> right=<span class="literal">true</span></span><br><span class="line">        <span class="keyword">if</span>(i&lt;seq.<span class="property">length</span>-<span class="number">1</span>) right=<span class="title class_">VerifySquenceOfBST</span>(seq.<span class="title function_">slice</span>(i,seq.<span class="property">length</span>-<span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> left&amp;&amp;right</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> seq=[<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">6</span>]</span><br><span class="line"><span class="keyword">let</span> res=<span class="title class_">VerifySquenceOfBST</span>(seq)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br></pre></td></tr></table></figure><h4 id="二叉树的最大深度"><a href="#二叉树的最大深度" class="headerlink" title="二叉树的最大深度"></a>二叉树的最大深度</h4><p>给定一个二叉树，找出其最大深度。</p><p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p><p>给定二叉树 <code>[3,9,20,null,null,15,7]</code>，</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">  3</span><br><span class="line"> / \</span><br><span class="line">9  20</span><br><span class="line">  /  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure><p>返回它的最大深度 3 。</p><p>思路：一棵二叉树的最大深度等于左子树深度和右子树最大深度的最大值 + 1</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">TreeDepth</span>(<span class="params">root</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> !root?<span class="number">0</span>:<span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="title class_">TreeDepth</span>(root.<span class="property">lChild</span>),<span class="title class_">TreeDepth</span>(root.<span class="property">rChild</span>))+<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉树的最小深度"><a href="#二叉树的最小深度" class="headerlink" title="二叉树的最小深度"></a>二叉树的最小深度</h3><p>给定一个二叉树，找出其最小深度。</p><p>最小深度是从根节点到最近叶子节点的最短路径上的节点数量。</p><p>给定二叉树 <code>[3,9,20,null,null,15,7]</code>,</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="number">3</span></span><br><span class="line"> / \</span><br><span class="line"><span class="number">9</span>  <span class="number">20</span></span><br><span class="line">  /  \</span><br><span class="line"> <span class="number">15</span>   <span class="number">7</span></span><br></pre></td></tr></table></figure><p>返回它的最小深度 2</p><p>思路：</p><ul><li>左右子树都不为空：左子树深度和右子树最小深度的最小值 + 1</li><li>左树为空：右子树最小深度的最小值 + 1</li><li>右树为空：左子树最小深度 + 1</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">minDepth</span>(<span class="params">root</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span>(!root.<span class="property">left</span>) <span class="keyword">return</span> <span class="title function_">minDepth</span>(root.<span class="property">rChild</span>)+<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(!root.<span class="property">right</span>) <span class="keyword">return</span> <span class="title function_">minDepth</span>(root.<span class="property">lChild</span>)+<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="title function_">minDepth</span>(root.<span class="property">rChild</span>),<span class="title function_">minDepth</span>(root.<span class="property">lChild</span>))+<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h3><p>输入一棵二叉树，判断该二叉树是否是平衡二叉树。</p><blockquote><p>平衡二叉树：每个子树的深度之差不超过1</p></blockquote><p>思路：</p><p>后序遍历二叉树</p><p>在遍历二叉树每个节点前都会遍历其左右子树</p><p>比较左右子树的深度，若差值大于1 则返回一个标记 -1表示当前子树不平衡</p><p>左右子树有一个不是平衡的，或左右子树差值大于1，则整课树不平衡</p><p>若左右子树平衡，返回当前树的深度（左右子树的深度最大值+1）</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">IsBalanced</span>(<span class="params">root</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">IsBalanced</span>(root)!=-<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">balanced</span>(<span class="params">node</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!node)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> left=<span class="title function_">balanced</span>(node.<span class="property">lChild</span>)</span><br><span class="line">    <span class="keyword">let</span> right=<span class="title function_">balanced</span>(node.<span class="property">rChild</span>)</span><br><span class="line">    <span class="keyword">if</span>(left==-<span class="number">1</span> || right==-<span class="number">1</span> || <span class="title class_">Math</span>.<span class="title function_">abs</span>(left-right)&gt;<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">max</span>(left,right)+<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2022/10/10/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2022/10/10/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
